name: iOS Build & TestFlight

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          npm run build
          echo "Frontend build completed. Checking dist folder:"
          ls -la dist/ | head -20

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Update Tauri config with Team ID
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri
          sed -i.bak "s/\$APPLE_TEAM_ID/$APPLE_TEAM_ID/g" tauri.conf.json
          cat tauri.conf.json | grep developmentTeam

      - name: Initialize iOS project
        run: |
          cd src-tauri
          cargo tauri ios init --skip-targets-install

          # Ensure iOS icons are in the asset catalog
          if [ -d "gen/apple/Assets.xcassets/AppIcon.appiconset" ]; then
            echo "Copying custom iOS icons to asset catalog..."
            cp -f icons/ios/*.png gen/apple/Assets.xcassets/AppIcon.appiconset/ || true
          fi

          echo "iOS project initialized"

      - name: Prepare certificates and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILE_PROVISION }}
        run: |
          # Decode certificate and provisioning profile to temp files
          # Fastlane will handle keychain creation and import
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PROFILE_PATH

          # Extract provisioning profile name for Fastlane
          PROFILE_NAME=$(security cms -D -i "$PROFILE_PATH" | grep -A 1 "<key>Name</key>" | grep "<string>" | sed 's/<\/*string>//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Export paths for Fastlane
          echo "CERTIFICATE_PATH=$CERTIFICATE_PATH" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_PATH=$PROFILE_PATH" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV

          echo "✅ Certificate and profile prepared for Fastlane"
          echo "Profile Name: $PROFILE_NAME"

      - name: Patch Xcode build script for CI (production mode)
        run: |
          cd src-tauri/gen/apple

          # Patch the "Build Rust Code" script to build in production mode
          ruby << 'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('norma-ai.xcodeproj')

          project.targets.each do |target|
            target.shell_script_build_phases.each do |phase|
              if phase.name == "Build Rust Code"
                # Replace script to build for production (uses embedded assets, not devUrl)
                phase.shell_script = <<~'SCRIPT'
                  set -e
                  export PATH="$HOME/.cargo/bin:$PATH"

                  # Tell Tauri this is a production build (ignore devUrl, use frontendDist)
                  export TAURI_ENV_PRODUCTION=true

                  cd "$SRCROOT/.."

                  # Build with Tauri in production mode (embeds frontend from dist/)
                  cargo build --lib --release --target aarch64-apple-ios

                  # Copy to where Xcode expects
                  mkdir -p "$SRCROOT/Externals/arm64/debug"
                  cp "target/aarch64-apple-ios/release/libnorma_ai_lib.a" "$SRCROOT/Externals/arm64/debug/libapp.a"

                  echo "✅ Rust library built in production mode"
                SCRIPT
              end
            end
          end

          project.save
          RUBY

          echo "✅ Xcode build script patched for production mode"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install Fastlane
        run: bundle install

      - name: Setup App Store Connect API key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          echo "APPLE_API_KEY_PATH=$HOME/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8" >> $GITHUB_ENV

      - name: Build and deploy with Fastlane
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: bundle exec fastlane beta

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: norma-ai-ios
          path: "*.ipa"
          retention-days: 30
