name: iOS Build & TestFlight

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          npm run build
          echo "Frontend build completed. Checking dist folder:"
          ls -la dist/ | head -20

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Update Tauri config with Team ID
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri
          sed -i.bak "s/\$APPLE_TEAM_ID/$APPLE_TEAM_ID/g" tauri.conf.json
          cat tauri.conf.json | grep developmentTeam

      - name: Initialize iOS project
        run: |
          cd src-tauri
          cargo tauri ios init --skip-targets-install

          # Ensure iOS icons are in the asset catalog
          if [ -d "gen/apple/Assets.xcassets/AppIcon.appiconset" ]; then
            echo "Copying custom iOS icons to asset catalog..."
            cp -f icons/ios/*.png gen/apple/Assets.xcassets/AppIcon.appiconset/ || true
          fi

          echo "iOS project initialized"

      - name: Setup App Store Connect API key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8

      - name: Build iOS app with Tauri
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_MOBILE_PROVISION: ${{ secrets.IOS_MOBILE_PROVISION }}
        run: |
          cd src-tauri
          cargo tauri ios build --export-method release-testing --verbose

      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          cd src-tauri

          # Find the generated IPA
          IPA_PATH=$(find gen/apple/build -name "*.ipa" | head -n 1)

          if [ -z "$IPA_PATH" ]; then
            echo "❌ Error: IPA file not found"
            exit 1
          fi

          echo "✅ Found IPA at: $IPA_PATH"

          # Upload to TestFlight using altool
          xcrun altool --upload-app --type ios --file "$IPA_PATH" \
            --apiKey ${APPLE_API_KEY_ID} \
            --apiIssuer ${APPLE_API_ISSUER}

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: norma-ai-ios
          path: "*.ipa"
          retention-days: 30
