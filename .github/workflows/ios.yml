name: iOS Build & TestFlight

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Initialize iOS project (first time only)
        run: |
          cd src-tauri
          cargo tauri ios init --skip-targets-install

      - name: Configure Xcode project for manual signing and Release build
        run: |
          cd src-tauri/gen/apple

          # Set CODE_SIGN_STYLE to Manual in project settings
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' norma-ai.xcodeproj/project.pbxproj

          # Configure scheme to use Release configuration for Archive action
          # This is necessary because xcodebuild archive uses the scheme's buildConfiguration setting,
          # not the -configuration command-line parameter
          SCHEME_FILE="norma-ai.xcodeproj/xcshareddata/xcschemes/norma-ai_iOS.xcscheme"
          if [ -f "$SCHEME_FILE" ]; then
            echo "Configuring scheme for Release archive..."
            sed -i '' 's/buildConfiguration = "debug"/buildConfiguration = "Release"/g' "$SCHEME_FILE"
            echo "Archive configuration set to Release"
          else
            echo "Warning: Scheme file not found at $SCHEME_FILE"
          fi

          # Verify the changes
          grep "CODE_SIGN_STYLE" norma-ai.xcodeproj/project.pbxproj || echo "No CODE_SIGN_STYLE found"
          grep -A 2 "ArchiveAction" "$SCHEME_FILE" || echo "ArchiveAction not found in scheme"

      - name: Install certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILE_PROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode certificate and provisioning profile from base64
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # Extract provisioning profile UUID and set it in Xcode project
          PP_UUID=$(grep -a -A 1 "<key>UUID</key>" $PP_PATH | grep "<string>" | sed 's/<\/*string>//g' | tr -d '[:space:]')
          echo "Provisioning Profile UUID: $PP_UUID"

          # Update Xcode project with provisioning profile UUID
          cd ~/work/normaai/normaai/src-tauri/gen/apple
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = $PP_UUID;/g" norma-ai.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE = .*/PROVISIONING_PROFILE = $PP_UUID;/g" norma-ai.xcodeproj/project.pbxproj

      - name: Build iOS app with xcodebuild
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri/gen/apple

          # Get the provisioning profile UUID (more reliable than name)
          PP_PATH=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -n 1)
          PP_UUID=$(security cms -D -i "$PP_PATH" | grep -A 1 "<key>UUID</key>" | grep "<string>" | sed 's/<\/*string>//g' | tr -d '[:space:][:cntrl:]')
          PP_NAME=$(security cms -D -i "$PP_PATH" | grep -A 1 "<key>Name</key>" | grep "<string>" | sed 's/<\/*string>//g' | tr -d '[:space:][:cntrl:]')

          echo "Provisioning Profile Name: $PP_NAME"
          echo "Provisioning Profile UUID: $PP_UUID"
          echo "Team ID: $APPLE_TEAM_ID"

          # Build and archive using xcodebuild with manual signing
          # Use UUID instead of name for PROVISIONING_PROFILE_SPECIFIER
          set -o pipefail
          xcodebuild clean archive \
            -scheme norma-ai_iOS \
            -workspace norma-ai.xcodeproj/project.xcworkspace \
            -configuration Release \
            -archivePath "build/norma-ai.xcarchive" \
            -sdk iphoneos \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PP_UUID" 2>&1 | tee xcodebuild.log

          echo "Build exit code: ${PIPESTATUS[0]}"

          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Build failed. Last 100 lines of output:"
            tail -100 xcodebuild.log
            echo "Searching for errors in log:"
            grep -i "error:" xcodebuild.log | tail -20 || echo "No specific errors found"
            exit 1
          fi

          # Create ExportOptions.plist
          mkdir -p build
          cat > build/ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.nikola.norma-ai</key>
                  <string>$PP_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF

          # Export the IPA
          xcodebuild -exportArchive \
            -archivePath "build/norma-ai.xcarchive" \
            -exportPath "build" \
            -exportOptionsPlist "build/ExportOptions.plist"

      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: |
          # Create directory for API key
          mkdir -p ~/private_keys

          # Save API key to file
          echo "$APPLE_API_KEY" > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8

          # Find the IPA file
          IPA_PATH=$(find src-tauri/gen/apple -name "*.ipa" -type f | head -n 1)

          echo "Found IPA at: $IPA_PATH"

          # Upload to TestFlight using App Store Connect API
          xcrun altool --upload-app --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_ISSUER"

      - name: Upload IPA as artifact (backup)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: norma-ai-ios
          path: src-tauri/gen/apple/**/*.ipa
          retention-days: 30