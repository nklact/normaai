name: iOS Build & TestFlight

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Initialize iOS project (first time only)
        run: |
          cd src-tauri
          cargo tauri ios init --skip-targets-install

      - name: Install certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILE_PROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode certificate and provisioning profile from base64
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # Verify installation
          PP_UUID=$(grep -a -A 1 "<key>UUID</key>" $PP_PATH | grep "<string>" | sed 's/<\/*string>//g' | tr -d '[:space:]')
          echo "Provisioning Profile UUID: $PP_UUID"
          echo "Certificate and provisioning profile installed successfully"

      - name: Update Tauri config with Team ID
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri
          # Update tauri.conf.json with actual Team ID
          sed -i.bak "s/\$APPLE_TEAM_ID/$APPLE_TEAM_ID/g" tauri.conf.json
          cat tauri.conf.json | grep developmentTeam

      - name: Build iOS app with Tauri CLI
        run: |
          cd src-tauri

          # Build iOS app using Tauri CLI
          # This will:
          # 1. Build the Rust library for iOS
          # 2. Build the Xcode project
          # 3. Use the provisioning profile and certificate we installed
          # 4. Generate an IPA file
          cargo tauri ios build --verbose

      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
        run: |
          # Create directory for API key
          mkdir -p ~/private_keys

          # Save API key to file
          echo "$APPLE_API_KEY" > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8

          # Find the IPA file (Tauri CLI outputs to target/release/bundle/ios/)
          IPA_PATH=$(find src-tauri/target -name "*.ipa" -type f | head -n 1)

          echo "Found IPA at: $IPA_PATH"

          # Upload to TestFlight using App Store Connect API
          xcrun altool --upload-app --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_ISSUER"

      - name: Upload IPA as artifact (backup)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: norma-ai-ios
          path: src-tauri/target/**/*.ipa
          retention-days: 30