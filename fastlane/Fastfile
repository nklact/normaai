default_platform(:ios)

platform :ios do
  desc "Build and deploy iOS app to TestFlight"
  lane :beta do
    # Setup CI environment (creates temporary keychain named 'fastlane_tmp_keychain')
    setup_ci if ENV['CI']

    # Import certificate to the keychain created by setup_ci
    import_certificate(
      certificate_path: ENV['CERTIFICATE_PATH'],
      certificate_password: ENV['CERTIFICATE_PASSWORD'],
      keychain_name: "fastlane_tmp_keychain",
      keychain_password: ""
    )

    install_provisioning_profile(
      path: ENV['PROVISIONING_PROFILE_PATH']
    )

    # Update project code signing settings
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "src-tauri/gen/apple/norma-ai.xcodeproj",
      team_id: ENV['APPLE_TEAM_ID'],
      code_sign_identity: "Apple Distribution",
      profile_name: ENV['PROVISIONING_PROFILE_NAME']
    )

    # Patch the Xcode build script to hardcode release configuration
    # This MUST happen after update_code_signing_settings to avoid being overwritten
    require 'xcodeproj'
    project = Xcodeproj::Project.open('src-tauri/gen/apple/norma-ai.xcodeproj')

    project.targets.each do |target|
      target.shell_script_build_phases.each do |phase|
        if phase.name == "Build Rust Code"
          # Replace entire script to force production build
          phase.shell_script = <<~'SCRIPT'
            set -e

            # Force production mode - tells Tauri to embed frontend assets
            export TAURI_ENV_PRODUCTION=true
            export TAURI_TRAY=false
            export TAURI_ENV_PLATFORM=ios
            export TAURI_ENV_FAMILY=mobile
            export TAURI_ENV_ARCH=aarch64

            cd "$SRCROOT/../.."

            # Verify dist folder exists
            if [ ! -d "../dist" ]; then
              echo "❌ Error: Frontend dist folder not found"
              exit 1
            fi

            # Build with hardcoded release configuration (bypasses Xcode scheme)
            cargo tauri ios xcode-script -v \
              --platform ${PLATFORM_DISPLAY_NAME:?} \
              --sdk-root ${SDKROOT:?} \
              --framework-search-paths "${FRAMEWORK_SEARCH_PATHS:?}" \
              --header-search-paths "${HEADER_SEARCH_PATHS:?}" \
              --gcc-preprocessor-definitions "${GCC_PREPROCESSOR_DEFINITIONS:-}" \
              --configuration release \
              ${FORCE_COLOR} ${ARCHS:?}
          SCRIPT
          UI.success("✅ Patched build script to hardcode release configuration")
        end
      end
    end

    project.save

    # Build the app
    build_app(
      workspace: "src-tauri/gen/apple/norma-ai.xcodeproj/project.xcworkspace",
      scheme: "norma-ai_iOS",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.nikola.norma-ai" => ENV['PROVISIONING_PROFILE_NAME']
        }
      }
    )

    # Upload to TestFlight
    upload_to_testflight(
      api_key: app_store_connect_api_key(
        key_id: ENV['APPLE_API_KEY_ID'],
        issuer_id: ENV['APPLE_API_ISSUER'],
        key_content: ENV['APPLE_API_KEY'],
        is_key_content_base64: false
      ),
      skip_waiting_for_build_processing: true
    )
  end
end
